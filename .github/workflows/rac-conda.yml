name: Build

on:
  push:
    branches:
      - main

jobs:
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Make linux script executable
        if: runner.os == 'Linux'
        run: chmod +x ./dependencies_linux.sh

      - name: Make mac script executable
        if: runner.os == 'macOS'
        run: chmod +x ./dependencies_mac.sh

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install scikit-build
          pip install cibuildwheel

      - name: Install pybind for windows
        if: runner.os == 'Windows'
        run: pip install pybind11

      - name: Set Python path for windows
        if: runner.os == 'Windows'
        run: echo "PPATH=$(which python)" >> $GITHUB_ENV

      - name: Run Windows dependencies script
        if: runner.os == 'Windows'
        shell: powershell
        run: .\dependencies_windows.ps1

      - name: Set mac environment variables 
        if: runner.os == 'macOS'
        run: |
          echo "CC=$(which clang)" >> $GITHUB_ENV
          echo "CXX=$(which clang++)" >> $GITHUB_ENV
          echo "OpenMP_LIBRARY=/usr/local/lib/libomp.dylib" >> $GITHUB_ENV

      - name: Build wheels
        run: python -m cibuildwheel --output-dir wheelhouse
        env:
          CIBW_SKIP: "pp*"
          CIBW_ENVIRONMENT_WINDOWS: PPATH=${{ env.PPATH }}

      - uses: actions/upload-artifact@v2
        with:
          name: wheelhouse
          path: ./wheelhouse/*.whl

  test_linux:
    name: Test on Linux
    runs-on: ubuntu-latest
    needs: build_wheels
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install numpy
          pip install scikit-learn
          pip install scipy

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: wheelhouse 
          path: dist

      - name: Install linux wheels
        run: |
          PLATFORM=$(uname -m)
          PYTHON_VERSION=$(python --version | cut -d " " -f 2 | cut -d "." -f 1-2)
          WHEEL_FILE=$(ls dist/racplusplus*cp${PYTHON_VERSION//.}*manylinux*${PLATFORM}.whl)
          echo "Installing ${WHEEL_FILE}"
          pip install "${WHEEL_FILE}"

      - name: Run tests
        run: |
          cd pytest
          pytest

  test_macos:
    name: Test on MacOS 
    runs-on: macos-latest
    needs: build_wheels
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install numpy
          pip install scikit-learn
          pip install scipy

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: wheelhouse 
          path: dist

      - name: Install mac wheels
        run: |
          PLATFORM=$(uname -m)
          PYTHON_VERSION=$(python --version | cut -d " " -f 2 | cut -d "." -f 1-2)
          WHEEL_FILE=$(ls dist/racplusplus*cp${PYTHON_VERSION//.}*macosx*${PLATFORM}.whl)
          echo "Installing ${WHEEL_FILE}"
          pip install "${WHEEL_FILE}"

      - name: Run tests
        run: |
          cd pytest
          pytest

  test_windows:
    name: Test on Windows 
    runs-on: windows-latest
    needs: build_wheels
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install numpy
          pip install scikit-learn
          pip install scipy

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: wheelhouse 
          path: dist

      - name: Install windows wheels
        run: |
          PLATFORM=$(uname -m)
          PYTHON_VERSION=$(python --version | cut -d " " -f 2 | cut -d "." -f 1-2)
          WHEEL_FILE=$(ls dist/racplusplus*cp${PYTHON_VERSION//.}*win_amd64.whl)
          echo "Installing ${WHEEL_FILE}"
          pip install "${WHEEL_FILE}"
        shell: bash

      - name: Run tests
        run: |
          cd pytest
          pytest


  upload_to_pypi:
    needs: [build_wheels, test_linux, test_macos, test_windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.7'

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(grep version pyproject.toml | head -n 1 | sed 's/version = "\(.*\)"/\1/')

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Install upload dependencies
        run: python -m pip install twine

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: wheelhouse 
          path: dist

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_API_TOKEN }}